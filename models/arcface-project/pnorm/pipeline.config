model {
    arcface {
        num_classes: 1000
        image_resizer {
            fixed_shape_resizer {
                height: 160
                width: 160
            }
        }
        first_stage_box_predictor {
            convolutional_box_predictor {
                min_depth: 16
                max_depth: 32
                num_layers_before_predictor: 2
                use_dropout: false
                dropout_keep_probability: 0.8
                kernel_size: 3
                box_code_size: 4
                apply_sigmoid_to_scores: false
                use_depthwise: true
                conv_hyperparams {
                    activation: RELU_6,
                    regularizer {
                        l2_regularizer {
                        weight: 0.0001
                        }
                    }
                    initializer {
                        truncated_normal_initializer {
                        stddev: 0.3
                        }
                    }
                    batch_norm {
                        train: false,
                        scale: true,
                        center: true,
                        decay: 0.9997,
                        epsilon: 0.001,
                    }
                }
            }
        }
        second_stage_box_predictor {
            convolutional_box_predictor {
                min_depth: 38
                max_depth: 38
                num_layers_before_predictor: 4
                use_dropout: false
                dropout_keep_probability: 0.8
                kernel_size: 3
                box_code_size: 4
                apply_sigmoid_to_scores: false
                use_depthwise: true
                conv_hyperparams {
                    activation: RELU_6,
                    regularizer {
                        l2_regularizer {
                        weight: 0.0001
                        }
                    }
                    initializer {
                        truncated_normal_initializer {
                        stddev: 0.3
                        }
                    }
                    batch_norm {
                        train: false,
                        scale: true,
                        center: true,
                        decay: 0.9997,
                        epsilon: 0.001,
                    }
                }
            }
        }
        third_stage_box_predictor {
            convolutional_box_predictor {
                min_depth: 40
                max_depth: 40
                num_layers_before_predictor: 2
                use_dropout: false
                dropout_keep_probability: 0.8
                kernel_size: 3
                box_code_size: 4
                apply_sigmoid_to_scores: false
                use_depthwise: true
                conv_hyperparams {
                    activation: RELU_6,
                    regularizer {
                        l2_regularizer {
                        weight: 0.0001
                        }
                    }
                    initializer {
                        truncated_normal_initializer {
                        stddev: 0.3
                        }
                    }
                    batch_norm {
                        train: false,
                        scale: true,
                        center: true,
                        decay: 0.9997,
                        epsilon: 0.001,
                    }
                }
            }
        }
        maxpool_kernel_size: 3
        avgpool_kernel_size: 3
        feature_extractor {
            type: 'ssd_inception_v2'
            min_depth: 16
            depth_multiplier: 1.0
            conv_hyperparams {
                activation: RELU_6,
                regularizer {
                    l2_regularizer {
                        weight: 0.00004
                    }
                }
                initializer {
                    truncated_normal_initializer {
                        stddev: 0.03
                        mean: 0.0
                    }
                }
                batch_norm {
                    train: false,
                    scale: true,
                    center: true,
                    decay: 0.9997,
                    epsilon: 0.001,
                }
            }
        }
        loss {
            classification_loss {
                weighted_softmax {
                }
            }
            localization_loss {
                weighted_smooth_l1 {
                }
            }
            hard_example_miner {
                num_hard_examples: 3000
                iou_threshold: 0.99
                loss_type: CLASSIFICATION
                max_negatives_per_positive: 3
                min_negatives_per_image: 0
            }
            classification_weight: 1.0
            localization_weight: 1.0
        }
        normalize_loss_by_num_matches: true
        post_processing {
            score_converter: ACOS
        }
        second_stage_post_processing {
            score_converter: COS
        }
        third_stage_post_processing {
            batch_non_max_suppression {
                score_threshold: 0.0
                iou_threshold: 0.6
                max_detections_per_class: 100
                max_total_detections: 300
            }
            score_converter: SOFTMAX
        }
    }
}

train_config: {
  batch_size: 1
  optimizer {
    momentum_optimizer: {
      learning_rate: {
        cosine_decay_learning_rate {
            learning_rate_base: 0.1
            total_steps: 5000
            warmup_learning_rate: 0.001
            warmup_steps: 200
        }
      }
      momentum_optimizer_value: 0.9
    }
    use_moving_average: false
  }
  gradient_clipping_by_norm: 10.0
  # Note: The below line limits the training process to 200K steps, which we
  # empirically found to be sufficient enough to train the pets dataset. This
  # effectively bypasses the learning rate schedule (the learning rate will
  # never decay). Remove the below line to train indefinitely.
  num_steps: 200000
  data_augmentation_options {
    random_horizontal_flip {
    }
  }
}
